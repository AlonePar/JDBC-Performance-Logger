package slaurent.jdbcperflogger;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;

public class StatsLoggingConnection extends WrappingConnection {

	public StatsLoggingConnection(final Connection wrappedConnection) {
		super(wrappedConnection);
	}

	// ----------- STATEMENT ------------
	@Override
	public Statement createStatement() throws SQLException {
		return new StatsLoggingStatement(super.createStatement(), this);
	}

	@Override
	public Statement createStatement(final int resultSetType, final int resultSetConcurrency) throws SQLException {
		return new StatsLoggingStatement(super.createStatement(resultSetType, resultSetConcurrency), this);
	}

	@Override
	public Statement createStatement(final int resultSetType, final int resultSetConcurrency,
			final int resultSetHoldability) throws SQLException {
		return new StatsLoggingStatement(super.createStatement(resultSetType, resultSetConcurrency,
				resultSetHoldability), this);
	}

	// ----------- PREPAREDSTATEMENT ------------
	@Override
	public PreparedStatement prepareStatement(final String sql) throws SQLException {
		return new StatsLoggingPreparedStatement(super.prepareStatement(sql), sql, this);
	}

	@Override
	public PreparedStatement prepareStatement(final String sql, final int autoGeneratedKeys) throws SQLException {
		return new StatsLoggingPreparedStatement(super.prepareStatement(sql, autoGeneratedKeys), sql, this);
	}

	@Override
	public PreparedStatement prepareStatement(final String sql, final int resultSetType, final int resultSetConcurrency)
			throws SQLException {
		return new StatsLoggingPreparedStatement(super.prepareStatement(sql, resultSetType, resultSetConcurrency), sql,
				this);
	}

	@Override
	public PreparedStatement prepareStatement(final String sql, final int resultSetType,
			final int resultSetConcurrency, final int resultSetHoldability) throws SQLException {
		return new StatsLoggingPreparedStatement(super.prepareStatement(sql, resultSetType, resultSetConcurrency,
				resultSetHoldability), sql, this);
	}

	@Override
	public PreparedStatement prepareStatement(final String sql, final int[] columnIndexes) throws SQLException {
		return new StatsLoggingPreparedStatement(super.prepareStatement(sql, columnIndexes), sql, this);
	}

	@Override
	public PreparedStatement prepareStatement(final String sql, final String[] columnNames) throws SQLException {
		return new StatsLoggingPreparedStatement(super.prepareStatement(sql, columnNames), sql, this);
	}

}
